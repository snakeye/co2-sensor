esphome:
  name: co2sensor
  platform: ESP8266
  board: esp12e
  platformio_options:
    monitor_speed: 115200
    # monitor_filters: colorize

    # upload_speed: 115200
    # upload_speed: 230400
    # upload_speed: 460800
    upload_speed: 921600

    lib_deps:
      - "adafruit/RTClib"
      - "ottowinter/AsyncMqttClient-esphome"

  includes:
    - "custom/ds3231/ds3231.h"

  on_boot:
    - light.turn_off:
        id: led

wifi:
  <<: !include ./secrets.yaml

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  # ap:
  #   ssid: "Co2Sensor Fallback Hotspot"
  #   password: "JWJsr3ppPuhL"

# captive_portal:

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
# api:

ota:

web_server:
  port: 80

i2c:
  sda: 4
  scl: 5
  scan: True
  # id: bus_a

uart:
  rx_pin: 14
  tx_pin: 16
  baud_rate: 9600

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time:
      - seconds: 0
        minutes: "*"
        then:
          lambda: |-
            auto time = id(sntp_time).now();
            // id(epoch_time).set_level(float(time.timestamp));
  # - platform: ds3231
  #   id: rtc_time

sun:
  latitude: 51.2119957
  longitude: 6.6281018

sensor:
  # - platform: dht
  #   model: AM2302
  #   pin: 12
  #   temperature:
  #     name: "Living Room Temperature"
  #   humidity:
  #     name: "Living Room Humidity"
  #   update_interval: 15s

  - platform: bmp280
    temperature:
      name: "BMP280 Temperature"
      oversampling: 16x
    pressure:
      name: "BMP280 Pressure"
    address: 0x76
    update_interval: 15s

  - platform: mhz19
    co2:
      name: "MH-Z19 CO2 Value"
      on_value_range:
        - below: 1400
          then:
            - light.turn_off:
                id: led
        - above: 1400
          then:
            - light.turn_on:
                id: led
                brightness: 10%
                red: 100%
                green: 0
                blue: 0
    temperature:
      name: "MH-Z19 Temperature"
    update_interval: 15s
    automatic_baseline_calibration: true

  # - platform: custom
  #   id: rtc
  #   lambda: |-
  #     auto rtc_sensor = new DS3231Sensor();
  #     App.register_component(rtc_sensor);
  #     return {
  #       rtc_sensor->year,
  #       rtc_sensor->month,
  #       rtc_sensor->day,
  #       rtc_sensor->hour,
  #       rtc_sensor->minute,
  #       rtc_sensor->second,
  #       rtc_sensor->temperature
  #     };
  #   sensors:
  #     - name: "RTC Clock Year"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Month"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Day"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Hour"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Minute"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Second"
  #       accuracy_decimals: 0
  #     - name: "RTC Clock Temperature"
  #       accuracy_decimals: 1

  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth

text_sensor:
  - platform: sun
    name: Sun Next Sunrise
    type: sunrise
  - platform: sun
    name: Sun Next Sunset
    type: sunset
  - platform: template
    name: Current Time
    lambda: |-
      return id(sntp_time).now().strftime("%Y-%m-%d %H:%M");

light:
  - platform: fastled_clockless
    id: led
    chipset: WS2812B
    pin: 2
    num_leds: 1
    rgb_order: GRB
    name: "FastLED SPI Light"

mqtt:
  broker: 192.168.1.100
  username: co2sensor
  password: MyMQTTPassword
esphome:
  name: co2sensor
  platform: ESP8266
  board: esp12e

  platformio_options:
    monitor_speed: 115200
    # monitor_filters: colorize

    # upload_speed: 115200
    # upload_speed: 230400
    # upload_speed: 460800
    upload_speed: 921600

  on_boot:
    - light.turn_on:
        id: rgb_led
        effect: co2_rgb
    - ds1307.read_time:

wifi:
  <<: !include ./secrets.yaml

# Enable logging
logger:
  level: INFO

#api:

ota:

web_server:
  port: 80
  ota: false

i2c:
  sda: 4
  scl: 5
  scan: True

uart:
  id: mhz19_uart
  rx_pin: 14
  tx_pin: 16
  baud_rate: 9600

time:
  - platform: ds1307
    id: rtc_time
    update_interval: never
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time_sync:
      then:
        - ds1307.write_time:
            id: rtc_time
        - ds1307.read_time:

sun:
  latitude: 51.2119957
  longitude: 6.6281018

sensor:
  - platform: bmp280
    temperature:
      id: bmp280_temp
      name: "BMP280 Temperature"
      oversampling: 16x
    pressure:
      id: bmp280_pres
      name: "BMP280 Pressure"
    address: 0x76
    update_interval: 10s

  - platform: mhz19
    uart_id: mhz19_uart
    co2:
      id: mhz19_co2
      name: "MH-Z19 CO2 Value"
      unit_of_measurement: ppa
    temperature:
      id: mhz19_temp
      name: "MH-Z19 Temperature"
    update_interval: 10s
    automatic_baseline_calibration: false

  - platform: sun
    name: Sun Elevation
    type: elevation

  - platform: sun
    name: Sun Azimuth
    type: azimuth

text_sensor:
  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise

  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset

  - platform: template
    id: rtc_current_time
    name: Current RTC Time
    lambda: |-
      return id(rtc_time).now().strftime("%Y-%m-%d %H:%M");

light:
  - platform: neopixelbus
    id: rgb_led
    variant: WS2812X
    pin: 2
    num_leds: 1
    name: "NeoPixel Light"
    effects:
      - lambda:
          name: co2_rgb
          update_interval: 10s
          lambda: |-
            // base values
            auto base = 400.0;
            auto warning = 1000.0;
            auto danger = 2000.0;
            // current state
            auto state = id(mhz19_co2).state;
            //
            auto call = id(rgb_led).turn_on();
            call.set_transition_length(10 * 1000);
            // color
            if(state < warning) {
              call.set_rgb((state - base) / (warning - base), 1.0, 0);
            }
            else if(state >= warning && state < danger) 
            {
              call.set_rgb(1.0, 1.0 - (state - warning) / (danger - warning),  0);
            }
            else {
              call.set_rgb(1.0, 0, 0);
            }
            // brightness
            auto brightness = 0.25 + 0.75 * (state - base) / (danger - base);
            if (brightness > 1.0) brightness = 1.0;
            // apply
            call.set_brightness(brightness);
            call.perform();

font:
  - file: "fonts/font-medium.ttf"
    id: font_small
    size: 8
    glyphs: [":", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", " ", "."]
  - file: "fonts/font-large.ttf"
    id: font_medium
    size: 14
    glyphs:
      [
        " ",
        ":",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "a",
        "h",
        "p",
        "P",
      ]
  - file: "fonts/font-large.ttf"
    id: font_large
    size: 32
    glyphs: [":", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]

display:
  - platform: ssd1306_i2c
    id: oled_display
    model: "SSD1306_128X64"
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          // Print time in HH:MM format
          it.strftime(128/2, 32, id(font_large), TextAlign::BASELINE_CENTER, "%H:%M", id(rtc_time).now());
          it.strftime(128/2, 44, id(font_small), TextAlign::BASELINE_CENTER, "%d %m %Y", id(rtc_time).now());

          it.printf(0, 64, id(font_medium), TextAlign::BASELINE_LEFT, "%.0f hPa", id(bmp280_pres).state);
          it.graph(64, 64 - 16, id(pressure_graph));

          // it.printf(128, 56, id(font_small), TextAlign::BASELINE_RIGHT, "%.1fC", id(bmp280_temp).state);

          // it.printf(128, 64, id(font_medium), TextAlign::BASELINE_RIGHT, "%d", int(id(mhz19_co2).state));
          // it.printf(128, 64, id(font_small), TextAlign::BASELINE_RIGHT, "%.1fC", id(mhz19_temp).state);

      - id: page2
        lambda: |-
          // Print time in HH:MM format
          it.strftime(128/2, 32, id(font_large), TextAlign::BASELINE_CENTER, "%H:%M", id(rtc_time).now());
          it.strftime(128/2, 44, id(font_small), TextAlign::BASELINE_CENTER, "%d %m %Y", id(rtc_time).now());

          it.printf(0, 64, id(font_medium), TextAlign::BASELINE_LEFT, "%d ppa", int(id(mhz19_co2).state));
          it.graph(64, 64 - 16, id(co2_graph));

interval:
  - interval: 5s
    then:
      - display.page.show_next: oled_display
      - component.update: oled_display

graph:
  - id: co2_graph
    sensor: mhz19_co2
    duration: 1h
    width: 64
    height: 16
    border: false

  - id: pressure_graph
    sensor: bmp280_pres
    duration: 24h
    width: 64
    height: 16
    border: false

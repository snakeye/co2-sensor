esphome:
  name: co2sensor
  platform: ESP8266
  board: esp12e

  platformio_options:
    monitor_speed: 115200
    # monitor_filters: colorize

    # upload_speed: 115200
    # upload_speed: 230400
    # upload_speed: 460800
    upload_speed: 921600

  # on_boot:
  #   - light.turn_off:
  #       id: rgb_led

wifi:
  <<: !include ./secrets.yaml

# Enable logging
logger:
  level: DEBUG

ota:

web_server:
  port: 80
  ota: false

i2c:
  sda: 4
  scl: 5
  scan: True

uart:
  id: mhz19_uart
  rx_pin: 14
  tx_pin: 16
  baud_rate: 9600

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time:
      - seconds: 0
        minutes: "*"
        then:
          lambda: |-
            auto time = id(sntp_time).now();
            // id(epoch_time).set_level(float(time.timestamp));

sun:
  latitude: 51.2119957
  longitude: 6.6281018

sensor:
  - platform: bmp280
    temperature:
      id: bmp280_temp
      name: "BMP280 Temperature"
      oversampling: 16x
    pressure:
      id: bmp280_pres
      name: "BMP280 Pressure"
    address: 0x76
    update_interval: 15s

  - platform: mhz19
    uart_id: mhz19_uart
    co2:
      id: mhz19_co2
      name: "MH-Z19 CO2 Value"
      unit_of_measurement: ppa
      on_value_range:
        - below: 800
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 25%
                red: !lambda |-
                  return (id(mhz19_co2).state - 400.0) / (800.0 - 400.0);
                green: 100%
                blue: 0
        - above: 800
          below: 1400
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 50%
                red: 100%
                green: !lambda |-
                  return 1.0 - (id(mhz19_co2).state - 800.0) / (1400.0 - 800.0);
                blue: 0
        - above: 1400
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 100%
                red: 100%
                green: 0
                blue: 0

    temperature:
      id: mhz19_temp
      name: "MH-Z19 Temperature"
    update_interval: 15s
    automatic_baseline_calibration: true

  - platform: sun
    name: Sun Elevation
    type: elevation
  - platform: sun
    name: Sun Azimuth
    type: azimuth

text_sensor:
  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
  - platform: template
    id: sntp_current_time
    name: Current Time
    lambda: |-
      return id(sntp_time).now().strftime("%Y-%m-%d %H:%M");

light:
  - platform: neopixelbus
    id: rgb_led
    variant: WS2812X
    pin: 2
    num_leds: 1
    name: "NeoPixel Light"

font:
  - file: 'slkscr.ttf'
    id: font_small
    size: 8
  - file: 'BebasNeue-Regular.ttf'
    id: font_large
    size: 32

display:
  - platform: ssd1306_i2c
    model: "SSD1306_128X64"
    address: 0x3C
    lambda: |-
      // Print time in HH:MM format
      it.strftime(128/2, 32, id(font_large), TextAlign::BASELINE_CENTER, "%H:%M", id(sntp_time).now());
      it.strftime(128/2, 40, id(font_small), TextAlign::BASELINE_CENTER, "%d %m %Y", id(sntp_time).now());

      it.printf(0, 56, id(font_small), TextAlign::BASELINE_LEFT, "%.0fhPa", id(bmp280_pres).state);
      it.printf(128, 56, id(font_small), TextAlign::BASELINE_RIGHT, "%.1fC", id(bmp280_temp).state);

      it.printf(0, 64, id(font_small), TextAlign::BASELINE_LEFT, "%dppa", int(id(mhz19_co2).state));
      it.printf(128, 64, id(font_small), TextAlign::BASELINE_RIGHT, "%.1fC", id(mhz19_temp).state);
